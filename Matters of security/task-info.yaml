type: edu
custom_name: stage5
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/EventListener.java
  visible: true
  text: |+
    package blockchain;

    public interface EventListener {
        void update(Event event);
    }

  learner_created: true
- name: src/blockchain/MinersCentral.java
  visible: true
  text: |-
    package blockchain;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.concurrent.ExecutorService;

    public class MinersCentral implements EventListener {

        private final List<Miner> miners;
        private final ExecutorService executors;

        public MinersCentral(ExecutorService executors) {
            this.executors = executors;
            miners = new ArrayList<>();
        }

        public void subscribe(Miner... miners) {
            for (var miner : miners) {
                if (miner != null) {
                    this.miners.add(miner);
                }
            }
        }

        public void startMining() {
            for (var miner : miners) {
                this.executors.submit(miner::startMining);
            }
        }

        public void stopCurrentMiners() {
            this.miners.forEach(Miner::stopMining);
        }

        @Override
        public void update(Event event) {
            if (event == Event.CURRENT_BLOCK_MINED) {
                stopCurrentMiners();
            } else if (event == Event.NEW_BLOCK_OPEN) {
                startMining();
            }
        }
    }
  learner_created: true
- name: src/blockchain/Miner.java
  visible: true
  text: |-
    package blockchain;

    import java.util.Random;

    public class Miner {
        private final int id;
        private final BlockChain blockChain;
        private final HashGenerator hashGenerator;
        private final Random random;
        private final BlockFactory blockFactory;
        private boolean continueMining;

        public Miner(int id, BlockChain blockChain, BlockFactory blockFactory, HashGenerator hashGenerator) {
            this.id = id;
            this.blockChain = blockChain;
            this.hashGenerator = hashGenerator;
            this.blockFactory = blockFactory;
            this.random = new Random();
            this.continueMining = true;
        }

        public void mine(Block block) {
            this.continueMining = true;
            block.setMinerId(this.id);

            long startTime = System.nanoTime();
            block.setHash(hashGenerator.createHash(block.toString()));
            while (this.continueMining && !blockChain.isBlockHashProven(block)) {
                block.setMagicNumber(random.nextLong());
                block.setHash(hashGenerator.createHash(block.toString()));
                block.setMessage(MessageGenerator.getMessage(this.id));
            }

            if (!this.continueMining) {
                return;
            }
            long endTime = System.nanoTime();

            block.setProvingDuration((endTime - startTime));

            blockChain.acceptNewBlock(block);
        }

        public int getId() {
            return id;
        }

        public BlockChain getBlockChain() {
            return blockChain;
        }

        public void startMining() {
            Block block = blockFactory.createBlock();
            mine(block);
        }

        public void stopMining() {
            this.continueMining = false;
        }
    }
  learner_created: true
- name: src/blockchain/BlockFactory.java
  visible: true
  text: |-
    package blockchain;

    public class BlockFactory {

        private final IdGenerator idGenerator;
        private final BlockChain blockChain;

        public BlockFactory(IdGenerator idGenerator, BlockChain blockChain) {
            this.idGenerator = idGenerator;
            this.blockChain = blockChain;
        }

        public Block createBlock() {
            int id = idGenerator.getId();

            return blockChain.size() == 0 && id == Block.FIRST_ID ?
                    new Block(id, "0") :
                    new Block(id, blockChain.getBlocks().get(blockChain.size() - 1).getHash());
        }
    }
  learner_created: true
- name: src/blockchain/MinerFactory.java
  visible: true
  text: |-
    package blockchain;

    public class MinerFactory {

        private final IdGenerator idGenerator;
        private BlockChain blockChain;

        public MinerFactory(IdGenerator idGenerator, BlockChain blockChain) {
            this.idGenerator = idGenerator;
            this.blockChain = blockChain;
        }

        public Miner createMiner() {
            return new Miner(
                    idGenerator.getId(),
                    blockChain,
                    new BlockFactory(new IdGenerator(), blockChain),
                    new HashGenerator()
            );
        }

        public void setBlockChain(BlockChain blockChain) {
            this.blockChain = blockChain;
        }
    }
  learner_created: true
- name: src/blockchain/EventManager.java
  visible: true
  text: |-
    package blockchain;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class EventManager {
        private final Map<Event, List<EventListener>> listeners;

        public EventManager(Event... events) {
            this.listeners = new HashMap<>();
            for (var event : events) {
                this.listeners.put(event, new ArrayList<>());
            }
        }

        public void subscribe(EventListener listener, Event... events) {
            for (var event : events) {
                var eventListeners = this.listeners.get(event);
                if (eventListeners != null) {
                    eventListeners.add(listener);
                } else {
                    eventListeners = new ArrayList<>();
                    eventListeners.add(listener);
                    this.listeners.put(event, eventListeners);
                }
            }
        }

        public void unsubscribe(EventListener listener, Event event) {
            var eventListeners = this.listeners.get(event);
            if (eventListeners == null) {
                return;
            }
            eventListeners.remove(listener);
        }

        public void notify(Event event) {
            var eventListeners = this.listeners.get(event);
            if (eventListeners == null) {
                return;
            }

            for (var listener : eventListeners) {
                listener.update(event);
            }
        }
    }
  learner_created: true
- name: src/blockchain/HashGenerator.java
  visible: true
  text: |-
    package blockchain;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    public class HashGenerator {

        public String createHash(String str) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                byte[] hash = digest.digest(str.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();
                for (var val : hash) {
                    String hex = Integer.toHexString(0xff & val);
                    if (hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/Event.java
  visible: true
  text: |-
    package blockchain;

    public enum Event {
        CURRENT_BLOCK_MINED,
        NEW_BLOCK_OPEN
    }
  learner_created: true
- name: src/blockchain/BlockWithProofValidator.java
  visible: true
  text: |-
    package blockchain;

    import java.util.Arrays;

    public class BlockWithProofValidator implements BlockValidator {
        private final HashGenerator hashGenerator;
        private int countOfZeros;

        public BlockWithProofValidator(int countOfZeros) {
            this.countOfZeros = countOfZeros;
            this.hashGenerator = new HashGenerator();
        }

        @Override
        public boolean isBlockHashProven(String hash) {
            String zeros = getZeroString(countOfZeros);
            return (countOfZeros > 0 && hash.startsWith(zeros))
                    || (countOfZeros == 0 && !hash.startsWith("0"));
        }

        @Override
        public boolean isBlockHashProven(Block block) {
            return isBlockHashProven(block.getHash());
        }


        @Override
        public boolean isBlockHashValid(Block block) {
            return hashGenerator.createHash(block.toString()).equals(block.getHash());
        }

        @Override
        public void setStartingZeroCount(int countOfZeros) {
            this.countOfZeros = countOfZeros;
        }

        @Override
        public int getStartingZeroCount() {
            return this.countOfZeros;
        }

        public int getCountOfZeros() {
            return countOfZeros;
        }

        public void setCountOfZeros(int countOfZeros) {
            this.countOfZeros = countOfZeros;
        }

        private String getZeroString(int countOfZeros) {
            char[] zeroArr = new char[countOfZeros];
            Arrays.fill(zeroArr, '0');
            return new String(zeroArr);
        }

    }
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  text: |-
    package blockchain;

    import java.util.ArrayList;
    import java.util.Hashtable;
    import java.util.List;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.TimeUnit;

    class BlockChain {
        private final BlockValidator validator;
        private final Hashtable<Integer, Block> blocksHT;
        private final List<Block> blockList;
        private final ExecutorService executors;
        private final EventManager eventManager;

        public BlockChain(ExecutorService executors, EventManager eventManager, BlockValidator validator) {
            this.validator = validator;
            this.blocksHT = new Hashtable<>();
            this.blockList = new ArrayList<>();
            this.executors = executors;
            this.eventManager = eventManager;
        }

        public final boolean isValid() {
            return true;
        }

        public synchronized void acceptNewBlock(Block block) {
            if (containsBlock(block)) {
                return;
            }

            if (!validator.isBlockHashValid(block)) {
                return;
            }

            blocksHT.put(block.getId(), block);
            blockList.add(block);
            eventManager.notify(Event.CURRENT_BLOCK_MINED);
            tweakNumberOfStartingZeros();

            if (blockList.size() < 5) {
                eventManager.notify(Event.NEW_BLOCK_OPEN);
            } else {
                executors.shutdownNow();
            }
        }

        private void tweakNumberOfStartingZeros() {
            if (this.blockList.isEmpty()) {
                return;
            }

            Block lastBlock = this.blockList.get(this.blockList.size() - 1);
            long lastProvingDuration = lastBlock.getProvingDurationInSeconds();
            int numberOfZeros = this.validator.getStartingZeroCount();

            if (lastProvingDuration >= 0 && lastProvingDuration <= 10) {
                this.validator.setStartingZeroCount(numberOfZeros + 1);
                lastBlock.setChangeInN("N was increased to " + (numberOfZeros + 1));
            } else if (lastProvingDuration > 60) {
                this.validator.setStartingZeroCount(numberOfZeros - 1);
                lastBlock.setChangeInN("N was decreased by " + (numberOfZeros - 1));
            } else {
                lastBlock.setChangeInN("N stays the same");
            }
        }

        public boolean isBlockHashProven(Block block) {
            return this.validator.isBlockHashProven(block);
        }

        public List<Block> getBlocks() {
            return blockList;
        }
        public int size() {
            return blockList.size();
        }

        @Override
        public String toString() {
            StringBuilder strBuilder = new StringBuilder();
            for (var block : blockList) {
                strBuilder.append("Block:\n")
                        .append("Created by miner # ")
                        .append(block.getMinerId())
                        .append("\nId: ")
                        .append(block.getId())
                        .append("\nTimestamp: ")
                        .append(block.getCreatedAt())
                        .append("\nMagic number: ")
                        .append(block.getMagicNumber())
                        .append("\nHash of the previous block:\n")
                        .append(block.getPrevHash())
                        .append("\nHash of the block:\n")
                        .append(block.getHash())
                        .append("\nBlock data: ")
                        .append(block.getMessage())
                        .append("\nBlock was generating for ")
                        .append(block.getProvingDurationInSeconds())
                        .append(" seconds\n")
                        .append(block.getChangeInN())
                        .append("\n\n");
            }
            return strBuilder.toString();
        }

        private boolean containsBlock(Block block) {
            return blocksHT.containsKey(block.getId());
        }
    }
  learner_created: true
- name: src/blockchain/IdGenerator.java
  visible: true
  text: |-
    package blockchain;

    public class IdGenerator {
        private int idCounter = 0;

        public int getId() {
            return ++idCounter;
        }
    }
  learner_created: true
- name: src/blockchain/MessageGenerator.java
  visible: true
  text: |
    package blockchain;

    public class MessageGenerator {
        private static int messageNumber = 0;
        private static StringBuilder stringBuilder = new StringBuilder();

        public static synchronized String getMessage(int minerName) {
            // Emulate messages from users, sent in queue While block generated
            messageNumber++;
            stringBuilder.append(messageNumber + " ");
            return stringBuilder.toString();
        }
        public static synchronized void deleteMessagesFromTheQueue() {
            stringBuilder = new StringBuilder();
        }

    }
  learner_created: true
- name: src/blockchain/BlockValidator.java
  visible: true
  text: |-
    package blockchain;
    public interface BlockValidator {
        boolean isBlockHashProven(String hash);
        boolean isBlockHashProven(Block block);
        boolean isBlockHashValid(Block block);
        void setStartingZeroCount(int countOfZeros);
        int getStartingZeroCount();
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |-
    package blockchain;

    import java.util.Date;

    public class Block {
        public static final int FIRST_ID = 1;

        private final int id;
        private final long createdAt;
        private int minerId;
        private String hash;
        private String prevHash;
        private long magicNumber;
        private long provingDuration;
        private String changeInN;
        private String message = "";

        public Block(int id, String prevHash) {
            this.createdAt = new Date().getTime();
            this.id = id;
            this.magicNumber = 0;
            this.setPrevHash(prevHash);
        }

        public int getId() {
            return id;
        }

        public String getMessage() {
            if (message.length() == 0) {
                message = "no messages";
            }
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
            MessageGenerator.deleteMessagesFromTheQueue();
        }

        public long getCreatedAt() {
            return createdAt;
        }

        public String getHash() {
            return hash;
        }

        public String getPrevHash() {
            return prevHash;
        }

        public void setPrevHash(String prevHash) {
            this.prevHash = id == FIRST_ID ? "0" : prevHash;
        }

        public boolean isFirstBlock() {
            return this.id == FIRST_ID;
        }

        public void setHash(String hash) {
            this.hash = hash;
        }

        public long getMagicNumber() {
            return magicNumber;
        }

        public void setMagicNumber(long magicNumber) {
            this.magicNumber = magicNumber;
        }

        public long getMinerId() {
            return minerId;
        }

        public void setMinerId(int minerId) {
            this.minerId = minerId;
        }

        public void setProvingDuration(long provingDuration) {
            this.provingDuration = provingDuration;
        }

        public long getProvingDuration() {
            return this.provingDuration;
        }

        public long getProvingDurationInSeconds() {
            return this.provingDuration / 1_000_000_000;
        }

        public String getChangeInN() {
            return changeInN;
        }

        public void setChangeInN(String changeInN) {
            this.changeInN = changeInN;
        }

        @Override
        public String toString() {
            return this.id + this.createdAt + this.prevHash + this.magicNumber;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/275/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 27 Sep 2021 11:23:19 UTC
record: -1
